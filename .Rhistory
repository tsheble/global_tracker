base +
stat_function(fun = constant, color = "red")
base +
stat_function(fun = absolute, color = "red")
base +
stat_function(fun = constant, color = "red")
# linear graph
base +
stat_function(fun = linear, color = "red")
linear <- function(x) {
x
}
# linear graph
base +
stat_function(fun = linear, color = "red")
base +
stat_function(fun = absolute, color = "red")
# square root graph
base +
stat_function(fun = squareroot, color = "red")
# quadratic graph
base +
stat_function(fun = quadratic, color = "red")
# logarithmic graph
base +
stat_function(fun = logarithmic, color = "red")
library(dplyr)
library(ggplot2)
library(scales)
library(tidyr)
library(data.table)
library(readr)
library(lubridate)
library(xml2)
library(htmltools)
library(htmlTable)
library(XML)
library(rvest)
library(stringr)
library(lubridate)
library(plotly)
url <- "https://www.tsa.gov/coronavirus/passenger-throughput"
url2 <- "https://www.tsa.gov/coronavirus/passenger-throughput?page=1"
flighthtml <- read_html(url)
flighthtml
tsa_raw1 <- flighthtml %>%
html_nodes('table.views-table') %>%
magrittr::extract() %>%
html_table() %>%
as.data.frame() %>%
rename('date' = Date, 'total_travelers_2021' = X2021.Traveler.Throughput,
'total_travelers_2020' = X2020.Traveler.Throughput,
'total_travelers_2019' = X2019.Traveler.Throughput)
tsa_raw1
flighthtml2 <- read_html(url2)
tsa_raw2 <- flighthtml2 %>%
html_nodes('table.views-table') %>%
magrittr::extract() %>%
html_table() %>%
as.data.frame() %>%
rename('date' = Date, 'total_travelers_2021' = X2021.Traveler.Throughput,
'total_travelers_2020' = X2020.Traveler.Throughput,
'total_travelers_2019' = X2019.Traveler.Throughput)
tsa_raw2
tsa_raw <- tsa_raw1 %>% bind_rows(tsa_raw2)
tsa_raw$total_travelers_2021 %>% replace_na("")
tsa_raw$date <- as.Date(tsa_raw$date, "%m/%d/%Y")
tsa_raw$total_travelers_2021 <- as.numeric(tsa_raw$total_travelers_2021 %>% str_remove_all(','))
tsa_raw$total_travelers_2020 <- as.numeric(tsa_raw$total_travelers_2020 %>% str_remove_all(','))
tsa_raw$total_travelers_2019 <- as.numeric(tsa_raw$total_travelers_2019 %>% str_remove_all(','))
tsa_raw
TSAdata<-tsa_raw %>% gather(c('total_travelers_2021', 'total_travelers_2020','total_travelers_2019'), key = "year", value = "travelers")
TSAdatad<-filter(TSAdata, date > as.Date('2020-12-31')) %>%
transmute(date = date-years(1), year = year, travelers = travelers) %>%
bind_rows(filter(TSAdata, date <= as.Date('2020-12-31')))
tsa_2019 <- TSAdatad %>% filter(year == 'total_travelers_2019') %>% arrange(date)
tsa_2019$date<-tsa_2019$date-years(1)
tsa_2019
tsa_2020 <- TSAdatad %>% filter(year == 'total_travelers_2020') %>% arrange(date)
tsa_2020
tsa_2021 <- TSAdatad %>% filter(year == 'total_travelers_2021') %>% arrange(date)
tsa_2021$date<-tsa_2021$date+years(1)
tsa_2021
tsa<-bind_rows(tsa_2019, tsa_2020, tsa_2021)
ggplot(tsa) + geom_smooth(aes(date, travelers), span = 0.1)
ts_tsa<-ts_ts(tsa)
ts_ggplot(ts_tsa, title = 'TSA Traffic', subtitle = "Time Series")+
scale_x_date(name = "Date",
labels = date_format("%b"),
breaks = date_breaks("1 month"))+
ggtitle("TSA Traffic","Percent Change, 2019 to 2020")+
theme(
axis.text = element_text(size = 14),
axis.line = element_line(color = "black", size = 1),
plot.background = element_rect(color = "white"),
panel.background = element_rect(color = "white", fill = "white"),
panel.border = element_rect(color = "black", fill = "NA"),
panel.grid.major.x = element_line(color = "black", linetype = 2),
panel.grid.major.y = element_line(color = "black", linetype = 1),
panel.grid.minor.y = element_line(color = "black", linetype = 3),
axis.title = element_text(size = 16, color = "black"),
title = element_text(size = 20),
legend.key = element_rect(fill = "white", color = "black"),
legend.background = element_rect(fill = "white", color = "black"),
legend.text = element_text(size = 11),
legend.title = element_text(size = 14),
legend.position = "right")
ts_tsa
loess.smooth(x = tsa$date, y = tsa$travelers,
span = 0.1, evaluation = 900) %>%
plot()
tsa
loess.smoo
install.packages("tigr")
ts_tsa
ggplot(tsa) + geom_smooth(aes(date, travelers), span = 0.1)
ts_tsa<-ts_ts(tsa)
ts_ggplot(ts_tsa, title = 'TSA Traffic', subtitle = "Time Series")+
scale_x_date(name = "Date",
labels = date_format("%b"),
breaks = date_breaks("1 month"))+
ggtitle("TSA Traffic","Percent Change, 2019 to 2020")+
theme(
axis.text = element_text(size = 14),
axis.line = element_line(color = "black", size = 1),
plot.background = element_rect(color = "white"),
panel.background = element_rect(color = "white", fill = "white"),
panel.border = element_rect(color = "black", fill = "NA"),
panel.grid.major.x = element_line(color = "black", linetype = 2),
panel.grid.major.y = element_line(color = "black", linetype = 1),
panel.grid.minor.y = element_line(color = "black", linetype = 3),
axis.title = element_text(size = 16, color = "black"),
title = element_text(size = 20),
legend.key = element_rect(fill = "white", color = "black"),
legend.background = element_rect(fill = "white", color = "black"),
legend.text = element_text(size = 11),
legend.title = element_text(size = 14),
legend.position = "right")
ts_tsa
ts_ggplot(ts_tsa, title = 'TSA Traffic', subtitle = "Time Series")+
scale_x_date(name = "Date",
labels = date_format("%b"),
breaks = date_breaks("1 month"))+
ggtitle("TSA Traffic","Percent Change, 2019 to 2020")+
theme(
axis.text = element_text(size = 14),
axis.line = element_line(color = "black", size = 1),
plot.background = element_rect(color = "white"),
panel.background = element_rect(color = "white", fill = "white"),
panel.border = element_rect(color = "black", fill = "NA"),
panel.grid.major.x = element_line(color = "black", linetype = 2),
panel.grid.major.y = element_line(color = "black", linetype = 1),
panel.grid.minor.y = element_line(color = "black", linetype = 3),
axis.title = element_text(size = 16, color = "black"),
title = element_text(size = 20),
legend.key = element_rect(fill = "white", color = "black"),
legend.background = element_rect(fill = "white", color = "black"),
legend.text = element_text(size = 11),
legend.title = element_text(size = 14),
legend.position = "right")
library(tsbox)
ts_tsa<-ts_ts(tsa)
ts_ggplot(ts_tsa, title = 'TSA Traffic', subtitle = "Time Series")+
scale_x_date(name = "Date",
labels = date_format("%b"),
breaks = date_breaks("1 month"))+
ggtitle("TSA Traffic","Percent Change, 2019 to 2020")+
theme(
axis.text = element_text(size = 14),
axis.line = element_line(color = "black", size = 1),
plot.background = element_rect(color = "white"),
panel.background = element_rect(color = "white", fill = "white"),
panel.border = element_rect(color = "black", fill = "NA"),
panel.grid.major.x = element_line(color = "black", linetype = 2),
panel.grid.major.y = element_line(color = "black", linetype = 1),
panel.grid.minor.y = element_line(color = "black", linetype = 3),
axis.title = element_text(size = 16, color = "black"),
title = element_text(size = 20),
legend.key = element_rect(fill = "white", color = "black"),
legend.background = element_rect(fill = "white", color = "black"),
legend.text = element_text(size = 11),
legend.title = element_text(size = 14),
legend.position = "right")
ts_tsa
tsa
isoweek(today())
ISOdate()
ISOdate(2019)
ISOdate(2021, 'February', 18)
ISOdate(2021, 'February', 18, 12, 34, 32, 'GMT')
ISOdate(2021, 02, 18, 12, 34, 32, 'GMT')
install.packages("imputeTS")
library(imputeTS)
tsAirgap
tsAirgap %>% is
ts_tsa
ts_tsa %>% is
library(zoo)
ts_(ts_tsa)
ts_(ts_tsa) %>% is
ts_ts(ts_tsa)
ts_ts(ts_tsa) %>% is
ts_tsa
tsa
tsa[303:400]
tsa[,303:400]
tsa[303:400,]
tsa[303:490,]
xts::xts(tsa$travelers, order.by = tsa$date)
xts_tsa <- xts::xts(tsa$travelers, order.by = tsa$date)
xts_tsa %>% is
ts_xts(xts_tsa)
tsa
xts_tsa <- xts::xts(tsa$travelers, order.by = tsa$date)
xts_tsa
xts_tsa[2,]
xts_tsa[1,]
xts_tsa
ts_xts(xts_tsa)
ts_xts(xts_tsa) %>% ts_boxable()
ts_xts(xts_tsa) %>% ts_box()
ts_xts(xts_tsa) %>% ts_wide()
ts_xts(xts_tsa) %>% is
ts_xts(xts_tsa) %>% na_interpolation()
ts_xts(xts_tsa) %>% na_random()
ts_xts(xts_tsa) %>% na_random() %>% plot()
ts_xts(xts_tsa) %>% na_interpolation() %>% plot()
ts_xts(xts_tsa) %>% na_interpolation() %>% ts)plot()
ts_xts(xts_tsa) %>% na_interpolation() %>% ts_plot()
ts_xts(xts_tsa) %>% na_seasplit() %>% ts_plot()
ts_xts(xts_tsa) %>% na_seadec() %>% ts_plot()
ts_xts(xts_tsa) %>% na_interpolation() %>% ts_plot()
ts_xts(xts_tsa) %>% na_interpolation() %>% ts_ggplot()
ts_xts(xts_tsa)
ts_xts(xts_tsa) %>% ts_trend()
fdeaths
fdeaths %>% ts_trend()
fdeaths %>% ts_trend() %>% ts_plot()
library(forecast)
xts_tsa
xts_tsa %>% is
xts_tsa %>% na_interpolation()
xts_tsa %>% na_interpolation() %>% ts_ts()
xts_tsa %>% na.aggregate() %>% ts_ts()
xts_tsa %>% na.aggregate.default() %>% ts_ts()
xts_tsa %>% na_replace() %>% ts_ts()
xts_tsa %>% na_kalman() %>% ts_ts()
xts_tsa %>% ggplot_na_distribution()
xts_tsa %>% na_seadec()
tsa
xts_tsa
xts_tsa %>% ts()
library(stringr)
setwd("~/")
setwd("~/R_projects/global_covid")
setwd("~/R_projects/global_covid/covid_global_tracker")
shiny::runApp()
if(!require(lubridate)) install.packages("lubridate", repos = "http://cran.us.r-project.org")
runApp()
runApp()
runApp()
# iso data
iso_raw <- read_csv("UID_ISO_FIPS_LookUp_Table.csv") %>% as.data.frame()
runApp()
runApp()
runApp()
# function to calculate daily new cases
get_newcases <- function(df) {
# function to calculate new_cases
new_cases <- function(x) {
new <- no_neg(x - lag(x))
}
# apply to data frame
global_cases_new <- df %>% mutate_at(vars(-Date), (funs(new_cases(.))))
# return data frame
return(global_cases_new)
}
runApp()
iso <- df %>% filter(is.na(Province_State) | Province_State == 'Greenland')
runApp()
# function to calculate daily new cases
get_newcases <- function(df) {
# function to calculate new_cases
new_cases <- function(x) {
new <- no_neg(x - lag(x))
}
# apply to data frame
global_cases_new <- df %>% mutate_at(vars(-Date), (funs(new_cases(.))))
# return data frame
return(global_cases_new)
}
# function to calculate weekly change in cases
get_weekcases <- function(df) {
# function to calculate week change in cases
week_cases <- function(x) {
week <- no_neg(x -lag(x, 7))
}
# apply to data frame
global_cases_week <- df %>% mutate_at(vars(-Date), (funs(new_cases(.))))
# return data frame
return(global_cases_week)
}
# calculate daily cases
global_daily_cases <- get_newcases(global_cases_totals)
global_daily_cases
# calculate weekly cases
global_week_cases <- get_weekcases(global_cases_totals)
# calculate weekly cases
global_week_cases <- get_weekcases(global_cases_totals)
# apply to data frame
global_cases_week <- df %>% mutate_at(vars(-Date), (funs(week_cases(.))))
Q
Q
Q
Q
runApp()
iso_raw <- read_csv("UID_ISO_FIPS_LookUp_Table.csv") %>% as.data.frame()
runApp()
leafletProxy(mapId = "globalmap", data = mapdata()) %>%
clearShapes() %>%
clearControls() %>%
addPolygons(data = mapdata(), color = 'white', weight = 0.5,
fillColor =
~colorQuantile(colors, total_cases_range, n = 400,
reverse=TRUE)
(total_pop),
fillOpacity = 0.6,
popup = ~paste("<h5>",Date,"</h5>",
"<h4><strong>",Combined_Key,"</strong></h4>",
"<p><strong>Total Cases: </strong>",total_cases %>% prettyNum(big.mark = ','),
"</br><strong>New Daily Cases: </strong>",daily_cases %>% prettyNum(big.mark = ','),
"</br><strong>New Weekly Cases: </strong>",weekly_cases %>% prettyNum(big.mark = ','),"</p>"))
if(input$mapvariable == "total_pop") {
leafletProxy(mapId = "globalmap", data = mapdata()) %>%
clearShapes() %>%
clearControls() %>%
addPolygons(data = mapdata(), color = 'white', weight = 0.5,
fillColor =
~colorQuantile(colors, total_cases_range, n = 400,
reverse=TRUE)
(total_pop),
fillOpacity = 0.6,
popup = ~paste("<h5>",Date,"</h5>",
"<h4><strong>",Combined_Key,"</strong></h4>",
"<p><strong>Total Cases: </strong>",total_cases %>% prettyNum(big.mark = ','),
"</br><strong>New Daily Cases: </strong>",daily_cases %>% prettyNum(big.mark = ','),
"</br><strong>New Weekly Cases: </strong>",weekly_cases %>% prettyNum(big.mark = ','),"</p>"))
}
observe({
if(input$mapvariable == "total_pop") {
leafletProxy(mapId = "globalmap", data = mapdata()) %>%
clearShapes() %>%
clearControls() %>%
addPolygons(data = mapdata(), color = 'white', weight = 0.5,
fillColor =
~colorQuantile(colors, total_cases_range, n = 400,
reverse=TRUE)
(total_pop),
fillOpacity = 0.6,
popup = ~paste("<h5>",Date,"</h5>",
"<h4><strong>",Combined_Key,"</strong></h4>",
"<p><strong>Total Cases: </strong>",total_cases %>% prettyNum(big.mark = ','),
"</br><strong>New Daily Cases: </strong>",daily_cases %>% prettyNum(big.mark = ','),
"</br><strong>New Weekly Cases: </strong>",weekly_cases %>% prettyNum(big.mark = ','),"</p>"))
}
})
observe({
if(input$mapvariable == "daily_pop") {
leafletProxy(mapId = "globalmap", data = mapdata()) %>%
clearShapes() %>%
clearControls() %>%
addPolygons(data = mapdata(), color = 'white', weight = 0.5,
fillColor =
~colorQuantile(colors, daily_cases_range, n = 400,
reverse=TRUE)
(daily_pop),
fillOpacity = 0.6,
popup = ~paste("<h5>",Date,"</h5>",
"<h4><strong>",Combined_Key,"</strong></h4>",
"<p><strong>Total Cases: </strong>",total_pop %>% prettyNum(big.mark = ','),
"</br><strong>New Daily Cases: </strong>",daily_cases %>% prettyNum(big.mark = ','),
"</br><strong>New Weekly Cases: </strong>",weekly_cases %>% prettyNum(big.mark = ','),"</p>"))
}
})
# range for legend
total_cases_range <- transmute(case_data, total_case_range=total_cases/Population) %>% round(digits = 2) %>% unique()
# range for legend
total_cases_range <- transmute(case_data, total_case_range=total_cases/Population) %>% round(digits = 2) %>% unique()
total_cases_range %>% quantile(na.rm = TRUE)
case_data
# range for legend
total_cases_range <- case_data$total_pop %>% round(digits = 2) %>% unique()
total_cases_range %>% quantile(na.rm = TRUE)
# range for legend
total_cases_range <- case_data$total_pop %>% round(digits = 0) %>% unique()
total_cases_range %>% quantile(na.rm = TRUE)
# range for legend
total_cases_range <- case_data$total_pop %>% round(digits = -2) %>% unique()
total_cases_range %>% quantile(na.rm = TRUE)
# range for legend
total_cases_range <- case_data$total_pop %>% round(digits = 0) %>% unique()
total_cases_range %>% quantile(na.rm = TRUE)
total_cases_range %>% quantile(na.rm = FALSE)
total_cases_range %>% max()
# range for legend
total_cases_range <- case_data$total_pop %>% unique()
total_cases_range %>% max()
total_cases_range %>% quantile()
total_cases_range %>% quantile(na.rm = TRUE)
daily_cases_range <- transmute(case_data, daily_case_range=daily_cases/Population) %>% unique()
daily_cases_range %>% quantil(na.rm = TRUE)
daily_cases_range %>% quantile(na.rm = TRUE)
runApp()
total_cases_range*1000000 %>% unique() %>% quantile(probs = seq(0, 1, 0.25), na.rm = TRUE)
total_cases_range*1000000 %>% unique() %>% quantile(probs = seq(0, 1, 0.25), na.rm = TRUE)
total_cases_range %>% unique() %>% quantile(probs = seq(0, 1, 0.25), na.rm = TRUE)
total_cases_range %>% unique() %>% quantile(probs = seq(0, 1, 0.05), na.rm = TRUE)
total_cases_range %>% round(2) %>% unique() %>% quantile(probs = seq(0, 1, 0.05), na.rm = TRUE)
total_cases_range %>% round(2) %>% as.character() %>% as.numeric() %>% unique() %>% quantile(probs = seq(0, 1, 0.05), na.rm = TRUE)
total_cases_range
total_cases_range[7000:7507]
total_cases_range[750000:74007]
total_cases_range[75000:74007]
total_cases_range[7500:74007]
case_data
# range for legend
total_cases_range <- transmute(case_data, total_case_range=total_cases/Population) %>% unique()
total_cases_range %>% quantile(na.rm = TRUE)
daily_cases_range <- transmute(case_data, daily_case_range=daily_cases/Population) %>% unique()
daily_cases_range %>% quantile(na.rm = TRUE)
weekly_cases_range <- transmute(case_data, week_cases_range=weekly_cases/Population) %>% unique()
weekly_cases_range %>% quantile(na.rm = TRUE)
case_data %>% arrange(desc(total_per))
case_data %>% arrange(desc(total_pop))
total_cases_range %>% round(2) %>% filter(.<1)
total_cases_range %>% round(2) %>% filter(.<1) %>% unique()
# range for legend
total_cases_range <- transmute(case_data %>% filter(Country_Region != 'Greenland'), total_case_range=total_cases/Population) %>% unique()
# range for legend
total_cases_range <- transmute(case_data %>% filter(Country != 'Greenland'), total_case_range=total_cases/Population) %>% unique()
total_cases_range %>% quantile(na.rm = TRUE)
# range for legend
total_cases_range <- transmute(case_data %>% filter(Province_State != 'Greenland'), total_case_range=total_cases/Population) %>% unique()
total_cases_range %>% quantile(na.rm = TRUE)
daily_cases_range <- transmute(case_data, daily_case_range=daily_cases/Population) %>% unique()
daily_cases_range %>% quantile(na.rm = TRUE)
total_cases_range %>% quantile(na.rm = TRUE)
# range for legend
total_cases_range <- transmute(case_data %>% filter(Province_State != 'Greenland'), total_case_range=total_cases/Population) %>% unique()
total_cases_range %>% quantile(na.rm = TRUE)
total_cases_range
case_data
# range for legend
total_cases_range <- transmute(case_data %>% filter(Province_State == 'Greenland'), total_case_range=total_cases/Population) %>% unique()
total_cases_range %>% quantile(na.rm = TRUE)
# range for legend
case_data %>% filter(Province_State == 'Greenland')
# range for legend
total_cases_range <- transmute(case_data %>% filter(iso3 != GRL), total_case_range=total_cases/Population) %>% unique()
# range for legend
total_cases_range <- transmute(case_data %>% filter(iso3 != 'GRL'), total_case_range=total_cases/Population) %>% unique()
total_cases_range %>% quantile(na.rm = TRUE)
daily_cases_range <- transmute(case_data, daily_case_range=daily_cases/Population) %>% unique()
'GRL'
# range for legend
total_cases_range <- transmute(case_data %>% filter(iso3 != 'GRL'), total_case_range=total_cases/Population) %>% unique()
total_cases_range %>% quantile(na.rm = TRUE)
daily_cases_range <- transmute(case_data, daily_case_range=daily_cases/Population) %>% unique()
daily_cases_range %>% quantile(na.rm = TRUE)
weekly_cases_range <- transmute(case_data, week_cases_range=weekly_cases/Population) %>% unique()
weekly_cases_range %>% quantile(na.rm = TRUE)
#colors
colors<-pals::linearlhot(500)
colors
total_cases_range %>% round(2) %>% filter(.<1) %>% unique()
case_data %>% arrange(desc(total_pop))
global_cases_raw
global_cases_raw %>% filter(Country_Region == 'Denmark')
global_cases_raw %>% filter(Country/Region == 'Denmark')
global_cases_totals
global_cases_raw[1,2]
global_cases_raw[c(1,2)]
global_cases_raw[c(1,3)]
global_cases_raw[c(1,2,3)]
global_cases_raw[c(1,2,5)]
names(global_cases_raw)[1,2] = c("Province", "Country") %>% filter(Country == 'Denmark')
names(global_cases_raw)[1,2] = c("Province", "Country")
names(global_cases_raw)[1,2] <- c("Province", "Country")
global_cases_raw[2] == 2 %>%
# raw data  global cases (cumulative)
cases_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
global_cases_raw[2] == 'Denmark'
global_cases_raw[global_cases_raw[2] == 'Denmark']
global_cases_raw %>% filter(`Province/State` == 'Denmark')
global_cases_raw
global_cases_raw %>% filter(`Province/State` == 'Denmark')
df <- data.frame(global_cases_raw$`Province/State`)
df
df <- data.frame(province = global_cases_raw$`Province/State`)
df
cases_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
global_cases_raw <- read_csv(cases_url) %>% as.data.frame()
global_cases_raw
df <- data.frame(province = global_cases_raw$`Province/State`, global_cases_raw$`Country/Region`, global_cases_raw$`12/1/20`)
df
df %>% province == greenland
df %>% province == 'greenland'
df %>% province == 'Greenland'
df %>% filter(province == 'Greenland')
df <- data.frame(province = global_cases_raw$`Province/State`, country = global_cases_raw$`Country/Region`, global_cases_raw$`12/1/20`)
df %>% filter(province == 'Greenland')
df %>% filter(country == 'Denmark')
